This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
AUTHORS
CONTRIBUTORS
LICENSE
MacOSXSystemFontReplacer.py
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
</file>

<file path="AUTHORS">
# This is the official list of authors of software
# in this repository for copyright purposes.
# This file is distinct from the CONTRIBUTORS files.
# See the latter for an explanation.

# Names should be added to this file as:
# Name or Organization <email address>
# The email address is not required for organizations.

Adam Twardoch <adam@twardoch.com>
</file>

<file path="CONTRIBUTORS">
# This is the official list of people who can contribute
# (and typically have contributed) code to this repository.
# The AUTHORS file lists the copyright holders; this file
# lists people. 
# Names should be added to this file like so:
#     Name <email address>

Adam Twardoch <adam@twardoch.com>
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2020 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="README.md">
MacOSXSystemFontReplacer
========================

With **[MacOSXSystemFontReplacer](http://bit.ly/MacOSXSystemFontReplacer)**, you can replace your system UI fonts of
Mac OS X 10.10 Yosemite with any fonts of your choice. 

You can supply any fonts to the tool as long as they have filenames in
a format that the tool expects. 

The tool is “safe” i.e. it does not modify the original system UI fonts. Instead, it writes patched versions of the fonts you provide into the System library folder, but you can easily uninstall those later manually or using the tool itself. Also, since it uses the fontTools library, it only does minimal modifications to your fonts, retaining all essential information. The fonts that you want patched can be in ```.ttf``` or ```.otf``` format, but you need to rename them and use the ```.otf``` extension. 

**If you use this tool, please consult if your font’s EULA allows modifications. Since this tool copies a small bit of the OS X system font into the patched fonts, you should not redistribute the patched fonts.** 

![Example: Work Sans](example-work-sans.png?raw=true "Example: I have used the tool to replace the default UI system font with Work Sans")
*This example shows how the tool was used to replace the default UI system fonts of Mac OS X 10.10 with the open-source [Work Sans](http://weiweihuanghuang.github.io/Work-Sans/) font family. The ```-s 105``` option was used to visually increase the font sizes by 5%.*

Installation and basic usage
----------------------------
This is a command-line tool written in Python. 

1. Download and install¹ [fontTools/TTX](https://github.com/behdad/fonttools/)
2. Download **[MacOSXSystemFontReplacer.py](./MacOSXSystemFontReplacer.py?raw=true)** and save it in a folder
3. Place your fonts in the same folder
3. Rename your fonts to a scheme that the tool expects (see section “Preparing your fonts” below)
4. Run Terminal.app and navigate to that folder using ```cd```
5. Run ```sudo python ./MacOSXSystemFontReplacer.py``` 
6. Enter your OS X Administrator password
7. Log out of Mac OS X and log in again

¹To install **fontTools/TTX**: download the [fonttools-master.zip](https://github.com/behdad/fonttools/archive/master.zip?raw=true) archive, unzip it, open Terminal.app and navigate to the unzipped folder using ```cd```. Then just type ```sudo python setup.py install``` and enter your Administrator password. 

Advanced usage
--------------
There are more options to the tool: 
```
MacOSXSystemFontReplacer.py [-h] [-i INPUT_FOLDER] [-s FONT_SIZE]
                            [-o OUTPUT_FOLDER] [-H] [-u] [-c]
                            [-t SYSTEM_TTC]

  -h, --help            show this help message and exit
  -i INPUT_FOLDER, --input-folder INPUT_FOLDER
                        path to folder with your input font files, default is
                        /Users/adam/Developer/vcs/github/twardoch/fonttools-
                        utils/mac-os-x-system-font-replacer
  -s FONT_SIZE, --font-size FONT_SIZE
                        scale the relative font size in %, default is 100, use
                        a higher value such as 105 to optically increase your
                        patched UI fonts
  -o OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER
                        custom path to folder where your patched fonts will be
                        installed, default is /Library/Fonts/ and you should
                        run the tool as: sudo MacOSXSystemFontReplacer.py
  -H, --help-more       print the file names that the tool expects to find in
                        the -i INPUT_FOLDER
  -u, --uninstall       uninstall previously patched fonts from the system folder 
                        or the -o OUTPUT_FOLDER
  -c, --no-reset-caches
                        do not reset OS X font caches (useful if you are
                        testing and using a custom -o OUTPUT_FOLDER)
  -t SYSTEM_TTC, --system-ttc SYSTEM_TTC
                        custom path to
                        /System/Library/Fonts/HelveticaNeueDeskInterface.ttc
                        (which may be different from current default in future
                        versions of OS X)
```

Preparing your fonts
--------------------

If you wish to replace all system UI fonts of Mac OS X 10.10 Yosemite with your custom fonts, you need to **rename the font files exactly** so that each of your font files has one of file names given in the table below. The table also indicates the general usage of the font and the relationships in the design of the original system font family. 

Filename | Usage | Design
---------| ------| ------
**System Font Regular.otf** | menus and other widgets | the main UI font
**System Font Bold.otf** | app menu and other emphasis | bolder version of Regular
**System Font Italic.otf** | emphasis | italic version of Regular
**System Font Bold Italic.otf** | | Bold Italic version of Regular
**System Font Medium P4.otf** | notification titles | slightly bolder than Regular
**System Font Medium Italic P4.otf** | emphasis of above | slightly bolder than Italic
**System Font UltraLight.otf** | largest headlines¹ | thinnest
**System Font Thin.otf** | mid-sized headlines² | slightly bolder than UltraLight
**System Font Light.otf** | yet smaller headlines³ | slightly bolder than Thin
**System Font Heavy.otf** | | bolder than Bold

¹e.g. in Calendar for month ²e.g. in the headline of Notification Center ³or as bold for the UltraLight e.g. in Calendar for year

You need to place the font files renamed according to the above scheme in a folder, and then you need to specify that folder using the ```-i``` command-line option. (If the tool is in the same folder as the fonts, you can omit that option). The tool will match each of your fonts to one of the default Mac OS X UI fonts using the filename. 

Then it will try to patch your fonts and install them in ```/Library/Fonts/```. Then you **log out and back in**, and you should see your new UI fonts.

Notes
-----

Please use the file names exactly as provided, and **use the ```.otf``` extension** even if your fonts are actually ```.ttf```. 

The most important fonts are *System Font Regular.otf* and *System Font Bold.otf*. You don’t need to provide all fonts (then the default system font will still be used in some places). 

If you find that after logging out and in again, the new UI fonts are visually too small, run the tool again, but this time, provide an ```-s``` command-line option with a percentage scaling. Usually a value such as ```-s 105``` will be good enough. 

In Mac OS X 10.10 Yosemite, the default Mac OS X UI fonts are stored in ```/System/Library/Fonts/HelveticaNeueDeskInterface.ttc```. The tool allows you to point to a different ```.ttc``` font as default, so it should work even in newer OS X versions. 

Software License and Disclaimer
-------------------------------
This tool is licensed “as is” under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0). By using the tool, you accept all conditions of the license, including Disclaimer of Warranty and Limitation of Liability.

Requirements
------------

This tool is written in Python 2.7 and requires the fontTools/TTX package from https://github.com/behdad/fonttools/

Credits
-------
* Code by [Adam Twardoch](./AUTHORS) 
* Inspired by https://github.com/jenskutilek/FiraSystemFontReplacement and https://github.com/dtinth/YosemiteSystemFontPatcher 
* Homepage: http://bit.ly/MacOSXSystemFontReplacer
</file>

<file path="MacOSXSystemFontReplacer.py">
#!/usr/bin/env python

VERSION = "1.1"
"""MacOSXSystemFontReplacer.py
Version {version}
Copyright (c) 2015 by Adam Twardoch <adam@twardoch.com>
Licensed under the Apache 2 license.
""".format(version=VERSION)
import argparse
import os
import os.path
import subprocess

import fontTools.ttLib

parser = argparse.ArgumentParser()
parser.description = (
    """With %(prog)s v"""
    + VERSION
    + """, 
you can replace your system UI fonts of Mac OS X 10.10 Yosemite with any fonts 
of your choice. You can supply any fonts to the tool as long as they have filenames in a format that 
the tool expects. Please run %(prog)s -H for the exact file names you should provide. The tool is 'safe' i.e. 
it does not modify the original system UI fonts. Instead, it writes patched versions of the fonts you 
provide into the System library folder, but you can easily uninstall those later manually or using the tool itself. 
"""
)
parser.add_argument(
    "-i",
    "--input-folder",
    help="path to folder with your input font files, default is %(default)s",
    default=os.getcwd(),
)
parser.add_argument(
    "-s",
    "--font-size",
    help="scale the relative font size in %%, default is %(default)s, use a higher value such as 105 to optically increase your patched UI fonts",
    type=int,
    default=100,
)
parser.add_argument(
    "-o",
    "--output-folder",
    help="custom path to folder where your patched fonts will be installed, default is %(default)s and you should run the tool as: sudo %(prog)s",
    default="/Library/Fonts/",
)
parser.add_argument(
    "-H",
    "--help-more",
    help="print the file names that the tool expects to find in the -i INPUT_FOLDER",
    action="store_true",
    default=False,
)
parser.add_argument(
    "-u",
    "--uninstall",
    help="uninstall previously patched fonts from system folder or the -o OUTPUT_FOLDER",
    action="store_true",
    default=False,
)
parser.add_argument(
    "-c",
    "--no-reset-caches",
    help="do not reset OS X font caches (useful if you are testing and using a custom -o OUTPUT_FOLDER)",
    action="store_true",
    default=True,
)
parser.add_argument(
    "-t",
    "--system-ttc",
    help="custom path to %(default)s (which may be different from current default in future versions of OS X)",
    default="/System/Library/Fonts/HelveticaNeueDeskInterface.ttc",
)
args = parser.parse_args()


def patchFont(ttcPath, fontNumber, inFolder, outFolder, help, fontScale, uninstall):
    success = False
    try:
        ttxIn = fontTools.ttLib.TTFont(ttcPath, fontNumber=fontNumber)
    except fontTools.ttLib.TTLibError:
        ttxIn = None
    if ttxIn:
        fontName = ""
        nameRecord = ttxIn["name"].getName(4, 1, 0, 0)
        if nameRecord:
            fontName = nameRecord.string
        else:
            nameRecord = ttxIn["name"].getName(4, 0, 3, 0)
            if nameRecord:
                fontName = unicode(nameRecord.string, "utf-16-be").encode("utf-8")
        if help:
            print('"%s.otf"' % fontName)
        elif uninstall:
            fontPathOut = os.path.join(outFolder, "%s.otf" % (fontName))
            if os.path.exists:
                try:
                    os.remove(fontPathOut)
                    print("Uninstalled: %s" % (fontPathOut))
                    success = True
                except:
                    print(
                        "Cannot uninstall: %s (try running tool with 'sudo'!)"
                        % (fontPathOut)
                    )
        else:
            fontPath = os.path.join(inFolder, "%s.otf" % (fontName))
            if os.path.exists(fontPath):
                ttxOut = fontTools.ttLib.TTFont(fontPath)
                scaleFactor = (
                    float(ttxOut["head"].unitsPerEm) / ttxIn["head"].unitsPerEm
                ) / fontScale

                ttxOut["OS/2"].sTypoAscender = int(
                    ttxIn["OS/2"].sTypoAscender * scaleFactor + 0.5
                )
                ttxOut["OS/2"].sTypoDescender = int(
                    ttxIn["OS/2"].sTypoDescender * scaleFactor + 0.5
                )
                ttxOut["OS/2"].sTypoLineGap = int(
                    ttxIn["OS/2"].sTypoLineGap * scaleFactor + 0.5
                )
                ttxOut["OS/2"].usWinAscent = int(
                    ttxIn["OS/2"].usWinAscent * scaleFactor + 0.5
                )
                ttxOut["OS/2"].usWinDescent = int(
                    ttxIn["OS/2"].usWinDescent * scaleFactor + 0.5
                )
                ttxOut["hhea"].ascent = int(ttxIn["hhea"].ascent * scaleFactor + 0.5)
                ttxOut["hhea"].descent = int(ttxIn["hhea"].descent * scaleFactor + 0.5)
                ttxOut["hhea"].lineGap = int(ttxIn["hhea"].lineGap * scaleFactor + 0.5)

                ttxOut["name"] = ttxIn["name"]
                ttxOut["head"].unitsPerEm = int(
                    ttxOut["head"].unitsPerEm / fontScale + 0.5
                )
                if "CFF " in ttxOut:
                    cff = ttxOut["CFF "].cff
                    cffd = cff[cff.fontNames[0]].rawDict
                    cffd["FontMatrix"][0] = cffd["FontMatrix"][0] * fontScale
                    cffd["FontMatrix"][3] = cffd["FontMatrix"][3] * fontScale

                    psName = None
                    psNameRecord = ttxIn["name"].getName(6, 1, 0, 0)
                    if psNameRecord:
                        psName = psNameRecord.string
                    else:
                        psNameRecord = ttxIn["name"].getName(6, 0, 3, 0)
                        if psNameRecord:
                            psName = unicode(psNameRecord.string, "utf-16-be").encode(
                                "utf-8"
                            )
                    if psName:
                        cff.fontNames[0] = psName

                    fullName = None
                    fullNameRecord = ttxIn["name"].getName(4, 1, 0, 0)
                    if fullNameRecord:
                        fullName = fullNameRecord.string
                    else:
                        fullNameRecord = ttxIn["name"].getName(4, 0, 3, 0)
                        if fullNameRecord:
                            fullName = unicode(
                                fullNameRecord.string, "utf-16-be"
                            ).encode("utf-8")
                    if fullName:
                        cffd["FullName"] = fullName

                    famName = None
                    famNameRecord = ttxIn["name"].getName(1, 1, 0, 0)
                    if famNameRecord:
                        famName = famNameRecord.string
                    else:
                        famNameRecord = ttxIn["name"].getName(1, 0, 3, 0)
                        if famNameRecord:
                            famName = unicode(famNameRecord.string, "utf-16-be").encode(
                                "utf-8"
                            )
                    if famName:
                        cffd["FamilyName"] = famName

                fontPathOut = os.path.join(outFolder, "%s.otf" % (fontName))
                try:
                    ttxOut.save(fontPathOut)
                    print('Saved patched: "%s"' % (fontPathOut))
                    success = True
                except:
                    print(
                        "Cannot save: %s (try running tool with 'sudo'!)"
                        % (fontPathOut)
                    )
            else:
                print('Not found: "%s"' % (fontPath))
    return (ttxIn, success)


if args.help_more:
    print(
        "This tool expects your font files with the following file names to be present in\n%s :"
        % (args.input_folder)
    )

fontNumber = 0
patchedFonts = 0
while True:
    (opened, patched) = patchFont(
        ttcPath=args.system_ttc,
        fontNumber=fontNumber,
        inFolder=args.input_folder,
        outFolder=args.output_folder,
        help=args.help_more,
        fontScale=float(args.font_size) / 100,
        uninstall=args.uninstall,
    )
    if opened:
        fontNumber += 1
    else:
        break
    if patched:
        patchedFonts += 1

if args.help_more:
    print(
        "The tool will match each of your fonts to one of the internal Mac OS X UI fonts\n(stored in {})\nusing the filename.\nThen it will try to patch your fonts and install them in {}.\nAfter logging out and back in, you should see your new UI fonts.".format(
            args.system_ttc, args.output_folder
        )
    )
else:
    if args.uninstall:
        print("Uninstalled %d fonts" % (patchedFonts))
    else:
        print("Finished patching %d fonts" % (patchedFonts))
if not args.no_reset_caches:
    subprocess.call(["sudo", "atsutil", "databases", "-remove"])
    print(
        "Mac OS X font caches have been reset. Please log out of Mac OS X and log in again."
    )
</file>

</files>
